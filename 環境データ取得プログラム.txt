import datetime 
import sys
import time
import RPi.GPIO as GPIO
import spidev
import smbus
import RPi.GPIO as GPIO
import spidev
from time import sleep
from PIL import Image
from PIL import ImageOps
from PIL import ImageDraw
from PIL import ImageFont


class LCD:
    ''' LCD graphic module AQM1248A library '''

    # LCD SETTING
    WIDTH = 128
    HEIGHT = 48
    PAGE_COUNT = 6

    # DEBUG
    cnt = 0
    DEBUG = False

#    def __init__(self, rs_port=24, cs_port=8, reset_port=23):
    def __init__(self, rs_port=25, cs_port=8, reset_port=25):
        ''' Init Object '''
        # set member
        self.rs_port = rs_port
        self.cs_port = cs_port
        self.reset_port = reset_port
        
        # init GPIO
        GPIO.setmode(GPIO.BCM)
        GPIO.setwarnings(False)
        GPIO.setup(rs_port, GPIO.OUT)
        GPIO.setup(cs_port, GPIO.OUT)
        GPIO.setup(reset_port, GPIO.OUT)
        
        # init SPI
        self.spi = spidev.SpiDev()
        self.spi.open(0, 0)
        self.spi.max_speed_hz = 1000000 

        self.init_lcd()


    def send_command(self, command):
        GPIO.output(self.rs_port, GPIO.LOW)
        # GPIO.output(self.cs_port, GPIO.LOW)
        self.spi.xfer([command])
        # GPIO.output(self.rs_port, GPIO.HIGH)
        # GPIO.output(self.cs_port, GPIO.HIGH)
        if self.DEBUG:
            print( "{0:04X}: {1:04X}".format(self.cnt, command) )
        self.cnt += 1

    def send_command_list(self, command_list, interval=0):
        for cmd in command_list:
            self.send_command(cmd)
            if interval > 0:
                sleep(interval / 1000)
        
    def send_data(self, data):
        GPIO.output(self.rs_port, GPIO.HIGH)
        # GPIO.output(self.cs_port, GPIO.LOW)
        self.spi.xfer(data)
        # GPIO.output(self.rs_port, GPIO.HIGH)
        # GPIO.output(self.cs_port, GPIO.HIGH)
        if self.DEBUG:
            print("data=", data, ":", len(data))

    def select_page(self, page):
        self.send_command(0xB0 | (page & 0xF))
        
    def select_col(self, col):
        self.send_command(0x00 | (col & 0xF)) # SET COLUMN LOWER
        self.send_command(0x10 | ((col >> 4) & 0xF)) # SET COLUMN UPPER
    
    def reset(self):
        ''' Reset LCD '''
        GPIO.output(self.reset_port, GPIO.LOW)
        sleep(0.1)
        GPIO.output(self.reset_port, GPIO.HIGH)

    def init_lcd(self):
        ''' init LCD '''
        # CS Chip Select Low
        # GPIO.output(self.cs_port, GPIO.LOW)
        # Reset
        self.reset()
        sleep(0.002)
        # 液晶初期化コマンド送信
        # 表示オフ→ADC設定→Common Output設定→バイアス設定
        self.send_command_list([0xAE, 0xA0, 0xC8, 0xA3])
        # 内部レギュレーターをオンにする
        self.send_command_list([0x2C, 0x2E, 0x2F], 2)
        # コントラスト設定
        self.send_command_list([0x23,0x81, 0x1C])
        # 表示設定
        # 全点灯オフ→スタートライン →通常表示→表示オン
        self.send_command_list([0xA4, 0x40, 0xA6, 0xAF])
        #
        # 液晶カーソル初期化
        # self.send_command_list([0xB0, 0x10, 0x00])
        #
        self.clear_display()

    def set_contrast(self, v = 0x1C):
        ''' set contrast level (0-0x3F) '''
        self.send_command_list([0x23, 0x81, (v & 0x3F)])

    def make_image_buffer(self, image):
        ''' set image data '''
        # size
        (w, h) = image.size
        if w != self.WIDTH or h != self.HEIGHT:
            image = image.resize((self.WIDTH, self.HEIGHT))
            (w, h) = image.size
        # grayscale
        image = ImageOps.grayscale(image)
        idata = list(image.getdata())
        c2 = lambda v : 0 if v >= 128 else 1
        buf = [0] * (self.PAGE_COUNT * self.WIDTH)
        for page in range(0, self.PAGE_COUNT):
            for col in range(0, self.WIDTH):
                i = page * self.WIDTH + col
                v = c2(idata[(page * 8) * w + col])
                for j in range(1, 8):
                    v |= c2(idata[(page * 8 + j) * w + col]) << j
                buf[i] = v
        return buf

    def show_buffer(self, buf):
        ''' show image '''
        for page in range(0, self.PAGE_COUNT):
            self.select_page(page)
            self.select_col(0)
            i1 = page * self.WIDTH
            i2 = (page + 1) * self.WIDTH
            self.send_data(buf[i1:i2])

    def show(self, image):
        ''' show image '''
        self.send_command(0xAE)
        buf = self.make_image_buffer(image)
        self.show_buffer(buf)
        self.send_command(0xAF)

    def clear_display(self):
        buf = [0] * (self.PAGE_COUNT * self.WIDTH)
        self.show_buffer(buf)
        
    def full_display(self):
        buf = [255] * (self.PAGE_COUNT * self.WIDTH)
        self.show_buffer(buf)

    def close(self):
        self.spi.close()

msg_T = ""
msg_P = ""
msg_H = ""
msg_L = ""
sw = 1

bus_number  = 1
i2c_address = 0x76

bus = smbus.SMBus(bus_number)

digT = []
digP = []
digH = []

t_fine = 0.0

def writeReg(reg_address, data):
    bus.write_byte_data(i2c_address,reg_address,data)

def get_calib_param():
    calib = []
    
    for i in range (0x88,0x88+24):
        calib.append(bus.read_byte_data(i2c_address,i))
    calib.append(bus.read_byte_data(i2c_address,0xA1))
    for i in range (0xE1,0xE1+7):
        calib.append(bus.read_byte_data(i2c_address,i))

    digT.append((calib[1] << 8) | calib[0])
    digT.append((calib[3] << 8) | calib[2])
    digT.append((calib[5] << 8) | calib[4])
    digP.append((calib[7] << 8) | calib[6])
    digP.append((calib[9] << 8) | calib[8])
    digP.append((calib[11]<< 8) | calib[10])
    digP.append((calib[13]<< 8) | calib[12])
    digP.append((calib[15]<< 8) | calib[14])
    digP.append((calib[17]<< 8) | calib[16])
    digP.append((calib[19]<< 8) | calib[18])
    digP.append((calib[21]<< 8) | calib[20])
    digP.append((calib[23]<< 8) | calib[22])
    digH.append( calib[24] )
    digH.append((calib[26]<< 8) | calib[25])
    digH.append( calib[27] )
    digH.append((calib[28]<< 4) | (0x0F & calib[29]))
    digH.append((calib[30]<< 4) | ((calib[29] >> 4) & 0x0F))
    digH.append( calib[31] )
    
    for i in range(1,2):
        if digT[i] & 0x8000:
            digT[i] = (-digT[i] ^ 0xFFFF) + 1

    for i in range(1,8):
        if digP[i] & 0x8000:
            digP[i] = (-digP[i] ^ 0xFFFF) + 1

    for i in range(0,6):
        if digH[i] & 0x8000:
            digH[i] = (-digH[i] ^ 0xFFFF) + 1  

def readData():
    data = []
    for i in range (0xF7, 0xF7+8):
        data.append(bus.read_byte_data(i2c_address,i))
    pres_raw = (data[0] << 12) | (data[1] << 4) | (data[2] >> 4)
    temp_raw = (data[3] << 12) | (data[4] << 4) | (data[5] >> 4)
    hum_raw  = (data[6] << 8)  |  data[7]
    
    compensate_T(temp_raw)
    compensate_P(pres_raw)
    compensate_H(hum_raw)

def compensate_P(adc_P):
    global  t_fine, msg_P
    pressure = 0.0
    
    v1 = (t_fine / 2.0) - 64000.0
    v2 = (((v1 / 4.0) * (v1 / 4.0)) / 2048) * digP[5]
    v2 = v2 + ((v1 * digP[4]) * 2.0)
    v2 = (v2 / 4.0) + (digP[3] * 65536.0)
    v1 = (((digP[2] * (((v1 / 4.0) * (v1 / 4.0)) / 8192)) / 8)  + ((digP[1] * v1) / 2.0)) / 262144
    v1 = ((32768 + v1) * digP[0]) / 32768
    
    if v1 == 0:
        return 0
    pressure = ((1048576 - adc_P) - (v2 / 4096)) * 3125
    if pressure < 0x80000000:
        pressure = (pressure * 2.0) / v1
    else:
        pressure = (pressure / v1) * 2
    v1 = (digP[8] * (((pressure / 8.0) * (pressure / 8.0)) / 8192.0)) / 4096
    v2 = ((pressure / 4.0) * digP[7]) / 8192.0
    pressure = pressure + ((v1 + v2 + digP[6]) / 16.0)
    msg_P = "気圧:%4.0fhPa" % (pressure / 100)

    print("気圧 : %7.2f hPa" % (pressure/100), end = " ")

def compensate_T(adc_T):
    global t_fine, msg_T
    v1 = (adc_T / 16384.0 - digT[0] / 1024.0) * digT[1]
    v2 = (adc_T / 131072.0 - digT[0] / 8192.0) * (adc_T / 131072.0 - digT[0] / 8192.0) * digT[2]
    t_fine = v1 + v2
    temperature = t_fine / 5120.0
    msg_T = "温度:%-4.2f℃" % (temperature)
    msg_t = "%-4.2f" % (temperature)
    print(msg_t)
    print("温度 : %-6.2f ℃" % (temperature), end = " ")


def compensate_H(adc_H):
    global t_fine, msg_H
    var_h = t_fine - 76800.0
    if var_h != 0:
        var_h = (adc_H - (digH[3] * 64.0 + digH[4]/16384.0 * var_h)) * (digH[1] / 65536.0 * (1.0 + digH[5] / 67108864.0 * var_h * (1.0 + digH[2] / 67108864.0 * var_h)))
    else:
        return 0
    var_h = var_h * (1.0 - digH[0] * var_h / 524288.0)
    if var_h > 100.0:
        var_h = 100.0
    elif var_h < 0.0:
        var_h = 0.0
    msg_H = "湿度:%4.2f％" % (var_h)
    msg_h = "%4.2f" % (var_h)
    print(msg_h)
    print("湿度 : %6.2f ％" % (var_h), end = " ")

def setup():
    osrs_t = 1            #Temperature oversampling x 1
    osrs_p = 1            #Pressure oversampling x 1
    osrs_h = 1            #Humidity oversampling x 1
    mode   = 3            #Normal mode
    t_sb   = 5            #Tstandby 1000ms
    filter = 0            #Filter off
    spi3w_en = 0            #3-wire SPI Disable

    ctrl_meas_reg = (osrs_t << 5) | (osrs_p << 2) | mode
    config_reg    = (t_sb << 5) | (filter << 2) | spi3w_en
    ctrl_hum_reg  = osrs_h

    writeReg(0xF2,ctrl_hum_reg)
    writeReg(0xF4,ctrl_meas_reg)
    writeReg(0xF5,config_reg)

#def read_light():
    #al = bus.read_byte_data(0x6A, 0xC0)
    #return val

GPIO.setmode(GPIO.BCM)
GPIO.setup(24, GPIO.IN)        # SW 1
GPIO.setup(23, GPIO.IN)        # SW 2
GPIO.setup(18, GPIO.IN)        # SW 3
GPIO.setup(22, GPIO.OUT)    # LED 1
GPIO.setup(27, GPIO.OUT)    # LED 2
GPIO.setup(17, GPIO.OUT)    # LED 3
GPIO.setup( 4, GPIO.OUT)    # IrLED
GPIO.setup(25, GPIO.OUT)    # LCD - RS
GPIO.setup( 5, GPIO.OUT)    # LCD - RESET

setup()
get_calib_param()
GPIO.add_event_detect(24, GPIO.RISING)
GPIO.add_event_detect(23, GPIO.RISING)
GPIO.add_event_detect(18, GPIO.RISING)
GPIO.output(22, GPIO.LOW)


def test3():
    # font drawing
    path = '/usr/share/fonts/truetype/fonts-japanese-gothic.ttf'
    # text
    disp = LCD()
    image = Image.new('1', (disp.WIDTH, disp.HEIGHT), 0)
    draw = ImageDraw.Draw(image)
    draw.rectangle((0,0,disp.WIDTH, disp.HEIGHT), outline=1, fill=1)
    f = ImageFont.truetype(path, 12, encoding='unic')
    draw.text((0,  34), msg_P, font=f, fill=0)
    draw.text((0,  24), msg_T, font=f, fill=0)
    draw.text((0, 14), msg_H, font=f, fill=0)
    draw.text((0,  0), msg1, font=f, fill=0)
    a = now.month

    f = ImageFont.truetype(path, 20, encoding='unic')
    if a >= 3 and a <= 5:
        draw.text((110,  0), "春", font=f, fill=0)

    elif a >= 6 and a <= 8:
        draw.text((110,  0), "夏", font=f, fill=0)

    elif a >= 9 and a <= 11:
        draw.text((110,  0), "秋", font=f, fill=0)

    else:
        draw.text((110,  0), "冬", font=f, fill=0)

    disp.show(image)
    disp.close()

if __name__ == '__main__':
    
    try:
        ios = 1
        while ios != 0:
            i = 0
            if GPIO.event_detected(24):
                GPIO.output(22, GPIO.LOW)
                GPIO.output(27, GPIO.HIGH)
                GPIO.output( 17, GPIO.HIGH)
                sw = 1
                
            if GPIO.event_detected(23):
                GPIO.output(27, GPIO.LOW)
                GPIO.output(22, GPIO.HIGH)
                GPIO.output( 17, GPIO.HIGH)
                sw = 2
                
            if GPIO.event_detected(18):
                GPIO.output( 17, GPIO.LOW)
                GPIO.output(22, GPIO.HIGH)
                GPIO.output(27, GPIO.HIGH)
                sw = 3

            now = datetime.datetime.now()
            print("{0:%m月%d日 | %H:%M:%S}". format(now))

            readData()


            msg1 = "{0:%y年%m月%d日}". format(now)
            test3()
            abc = 2
            break
            sleep(1)
    except KeyboardInterrupt:
        print("\nExit.")
        disp = LCD()
        disp.clear_display()
        GPIO.cleanup()





